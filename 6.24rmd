---
title: '6.22'
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.


```{r}
threeHeigths <- c(Gary = 178, John = 182, Cam = 175)

sorted_height<-sort(threeHeigths,decreasing = T)
sorted_persons<-names(sorted_height)

```
```{r}
# 由cities創出每個元素對應的北部、東部、中部region factor
cities <- factor(c("台北","花蓮","台東","台中"))
levels(cities)
cities->region


levels(region)%>%
str_replace("台北","北部")%>%
str_replace("台東|花蓮","東部")%>%
str_replace("台中","中部")->levels(region)

```
```{r}
num <- c(2,97,22,15,7)
(num>50)%>%
  num[.]

```
```{r}
population <- c(`cityA`=500,`cityB`=1500, `cityC`=399)
cities <- c("cityA","cityA","cityB","cityB","cityC")
population%>%
  sort%>%
  names%>%
factor(cities,.)->cities
cities

population%>%
  {names(sort())%>%
      factor(cities,.)->cities
    cities


```

```{r}
dataList <- list(
  num=c(2,97,22,15,7),
  chr=c("2","97","22","15","7")
)
dataList%>%
  map(is.numeric)%>%
  unlist%>%
  dataList[.]%>% #1個LIST裡面只有1個元素
  {(.[[1]]>50)}%>%
  dataList[[1]][.]->above50
above50


map(dataList, is.numeric) -> results
unlist(results) -> pick_numeric

dataList[pick_numeric] -> num_element
(num_element[[1]] > 50) -> pick_big
num_element[[1]][pick_big] -> bigNumber
  

  
  
  

```




```{r}

jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19

jsonlite::fromJSON(
  "https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) %>%
unlist(.) -> population
```{r}
factor(covid19$縣市)%>%
levels(.) %>%
population[.] %>%
sort(decreasing=T)%>%
names(.)%>%
factor(
    covid19$縣市, levels=.
  )%>%
levels(.)
```
  
  
  covid19$縣市 <- factor(covid19$縣市)
levels(covid19$縣市) %>%
population[.] -> population
population <- sort(population, decreasing=T)
population
names(population)%>%
factor(covid19$縣市, levels=.)->covid19$縣市
levels(covid19$縣市)



factor(covid19$縣市) %>%
levels(.) %>%
population[.] -> population

population <- sort(population, decreasing=T)
population

newLevels <- names(population)
newLevels %>%
factor(
    covid19$縣市, levels=.
  ) %>%
{levels(.)}
```{r}
supply_return<-
function(p){
q_s=2*p
return(q_s)
}
supply_return(1)->qs1
```

```{r}
dateInput <- today()
locationInput <- "新北市"

jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
  weather_next36hours

# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location #可挑出locationInput的「要/不要」向量

weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation

# 在weatherAtLocation找出符合時間的天氣資訊

(weatherAtLocation$elementName=="MaxT") ->
  pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
  pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT

glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")






```
```{r}
now()
what_time_it_is<-
  function(p){
   with_tz(now(),tzone = p)
    return()
    
  }
what_time_it_is("Europe/Paris")

what_time_it_is <-
  function(timezone){
    now <- with_tz(now(), tz = timezone)
    return(now)
  }
what_time_it_is("Europe/Paris")

```
```{r}
intercept <- 10
slope <- -5
myDemand <- 
  function(p){
  q_d <- intercept + slope*p
  return(q_d)
}
myDemand(1)
demand_return <- 
  function(p){
    q_d <- 10-5*p
    return(q_d)
  }
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)

findGlobals(demand_return)
findGlobals(myDemand)




mydemand<-
  function(p,intercept=10,slope=2){
    q_d=intercept+slope*p
    return(q_d)
  }
mydemand(1,intercept=4,slope=1)
```

```{r}
install.packages("httr")
library(httr)
library(magrittr)
route <- "916"

GET(glue::glue("https://ptx.transportdata.tw/MOTC/v2/Bus/EstimatedTimeOfArrival/City/NewTaipei/{route}?$top=30&$format=JSON")) %>%
  content -> estimatedArrivalTime

GET(glue::glue("https://ptx.transportdata.tw/MOTC/v2/Bus/Route/City/NewTaipei/{route}?$top=30&$format=JSON")) %>%
  content -> routeInfo




when_busArrives<-
  function(route=916,stop="台北大學正門"){
route <- "916"

GET(glue::glue("https://ptx.transportdata.tw/MOTC/v2/Bus/EstimatedTimeOfArrival/City/NewTaipei/{route}?$top=30&$format=JSON")) %>%
  content -> estimatedArrivalTime

GET(glue::glue("https://ptx.transportdata.tw/MOTC/v2/Bus/Route/City/NewTaipei/{route}?$top=30&$format=JSON")) %>%
  content -> routeInfo

estimatedArrivalTime[[22]][c(11,12)]
return(route)

    
    
  }

```
```{r}
readline(prompt = "請輸入你的學號") -> studentId

if(
  str_detect(studentId,"^[43]9[0-9]|1[01][0-9][0-9]{5}$",Negate=T
  ){warning("你所輸入的學號不正確")}

```


```{r}
if(!require(lubridate)){ # condition: 是否「沒安裝lubridate」？
  install.packages("lubridate")
}
lubridate::ymd_hms("2020-07-01 13:00:00 GMT")

!require(purrr)
```


```{r}
check_package<-function(pkgName){
if(!require(pkgName)){install.packages(pkgName)}}
check_package("clipr")
check_package("soar")
check_packages<-function(package1,package2){
  if(!require(package1)){install.packages(package1)}
  if(!require(package2)){install.packages(package2)}
}
check_packages(c("purrr","clipr"))


convert_TaiwanDate2WesternDate <- function(twDate){
  check_packages(stringr,lubridate)

  library(stringr)
  regex_pattern <-
    "(?<=民國)[0-9]+(?=年)"
  
  # 取出民國年，計算西元年
  year <- 
    str_extract(
      twDate,
      regex_pattern)
  westernYear <- as.integer(year)+1911
  
  # 替換民國xx年的xx成西元年數字
  str_replace(
    twDate,
    regex_pattern,  # 要換掉的文字
    as.character(westernYear) # 要替換的內容
  ) -> twDate_reformat
  
  lubridate::ymd(twDate_reformat) -> westernDate
  return(westernDate)
}
  convert_TaiwanDate2WesternDate("民國98年12月5日")

```



```{r}
askSilly_weather <- function(locationInput,dateInput){
  
  if(!require(jasonlite)){install.packages(jasonlite)}
  if(str_detect(locationInput,"臺"))
  
  jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
  weather_next36hours
  
  (weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
  
  weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
  (weatherAtLocation$elementName=="MaxT") ->
    pick_MaxT
  (weatherAtLocation$elementName=="MinT") ->
    pick_MinT
  weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
  weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
  
  glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}



str_replace?
  

```




```{r}

if(!exists("weather_next36hours")){
    jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
    weather_next36hours
  SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
```

```{r}

myFun<-function(n){
if((n%%2)==0){
  fvalue<-n/2
}else{
  fvalue<- -(n+1)/2
}

return(fvalue)}


myFun(21)
```



```{r}
jsonlite::fromJSON("https://www.dropbox.com/s/d14j5hp3i5ps657/examSubmissionTimes.json?dl=1") -> examSubmissionTime

str(examSubmissionTime)

head(examSubmissionTime$section)
head(examSubmissionTime$time)
library(lubridate)
i<-1
itime<-examSubmissionTime$time[[i]]
ymd_hms(itime,tz="Asia/Taipei")
deadline<-ymd_hms("2020-05-27 15:00:00",tz="Asia/Taipei")
class(deadline)
howearly<-itime-deadline
print(howearly)

```



```{r}
i<-1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]

deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei") # 

howEarly <- deadline - lubridate::ymd_hms(
  student_i_time, tz="Asia/Taipei") 
print(howEarly)
```
```{r}
jsonlite::fromJSON("https://www.dropbox.com/s/d14j5hp3i5ps657/examSubmissionTimes.json?dl=1") -> examSubmissionTime


head(examSubmissionTime$section)
head(examSubmissionTime$time)
```

```{r}
computehowearly<-function(student_i_section, student_i_time){
  if(student_i_section=="56"){
    deadline<-lubridate::ymd_hms("2020-05-27 15:00:00",tz="Asia/Taipei")
  }else{
    deadline<-lubridate::ymd_hms("2020-05-27 17:00:00",tz="Asia/Taipei")
    }
  howearly<-deadline-lubridate::ymd_hms(student_i_time,tz="Asia/Taipei")
  return(howearly)
  
}

computehowearly("78","2020-05-27 15:47:22")




computehowearly(examSubmissionTime$section[[1]],examSubmissionTime$time[[1]])
compute_howEarly(examSubmissionTime$section[[2]],examSubmissionTime$time[[2]])
compute_howEarly(examSubmissionTime$section[[3]],examSubmissionTime$time[[3]])





studentSequence <- 1:length(examSubmissionTime$section)

map(studentSequence,
    ~compute_howEarly(
      examSubmissionTime$section[[.x]],
      examSubmissionTime$time[[.x]])
    ) -> list_howEarly






```


